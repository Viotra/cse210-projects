REVIEW PROGRAM SPECIFICATION

    What does the program do?
        - Keeping a journal
        - Making it easier to keep a journal by creating an app
        - BUilds a habit
        - Saving daily information
        - keeps track of entries
        - Provides prompts
        - tracks date and time
        - Save entries to an external file
        - Load external files

    What user inputs does it have?
        - Menu
            - New entry
            - Read entry
            - Save entry - file name
            - Load entry - file name
            - Quit

    What output does it produce?
        - Entries (external and temporary files)
        - Prompts
        - Menu

    How does the program end?
        - Quitting (Menu option 5)

DETERMINE THE CLASSES

    What are good candidates for classes in this program?
        - Journal
        - Prompts (Optional)
        - Entries
        - Program
        - Files (Optional - save and load functions)

    What are the primary responsibilities of each class?
        - Journal
            - Keep the journal
            - Menu
            - Calling classes
            - Save journal owner (attribute)

        - Prompts (Optional)
            - Create/provide prompts
            - Selects random prompt (stretch)
                - Store prompt list
            
        - Entries
            - Accepting user entries
            - Storing user entries
            - Load Entries (depending on program design)

        - Program
            - Call main function
            - Call other classes
            - Abstract the program
            
        - Files (Optional - save and load functions)
            - Save Entries
            - Load entries
            - Keep list of saved files (stretch)
                - include "over-write/edit" option

DEFINE CLASS BEHAVIORS

    Go through each of your classes and ask:

        What are the behaviors this class will have in order to fulfill its responsibilities? (In other words, what things should this class do?)
           
            Program Class
                public static void main()
                Loop through menu options using while, if else, a switch, Do-While

            Journal Class
                - provide code for each menu function
                - list for entries?
                - GetPrompt()

            Entry Class
                - LoadEntry()
                - SaveEntry()
                - Provide a format for the entries, use DateTime()

DEFINE CLASS ATTRIBUTES

    Go through each of your classes and ask:

        What attributes does this class need to fulfill its behaviors? (In other words, what variables should this class store?)

        What are the data types of these member variables?

            Program Class
                Attributes:
                    _userInput: string (selecing variable in while loop for the menu)

            Journal Class
                Attributes:
                    _prompt: string (could return a list of prompts, or just one, depending on deisgn)
                    _entry: string
                    _saveToFile: entry
                    _loadEntry: entry
                    _fileName: string

            Entry Class
                Attributes
                    _entry: string
                    _saveToFile: entry
                    _loadEntry: entry
                    _fileName: string
                    _dateTime: string
                    _prompt: string
                    
My Program

- Program.cs
        	-creates a string for a menu prompt option as menuOption
		-Initializes a new Entry class object as newEntry
		-Initiates a loop that will quit if the menuOption is ever "5"
			-Initializes a new Journal class object as journal
			-Calls the MenuPrompt function from journal and stores its value as menuOption
			-If the user enters "1", the EntryPrompts function is called from
			 newEntry. All responses are stored within the class attribute _entries
			-If the user enters "2", the program will concatenate all entries in the 
			 _entries list dilineated by a "," and display them to the terminal
			-If the user enters "3", the SaveEntries method is called from the journal and uses the _entries attribute as an argument
			-If the user enters "4", the LoadEntries method is called from the journal and uses the newEntry object as an argument

	  - Journal.cs
		-creates a new class called Journal
			-Attribute: string _ownerName stores the name of the journal owner. Default value is set to "Tim"
			-Method: string MenuPrompt() displays all the main menu options and records the user input under a local variable menuOption and returns it
			-Method: void SaveEntries(List<string> entries) records a file name from the user input then checks if it already exists. If the file does exist, the user can either overwrite the file by typing "yes" or "y", all other 			 entries will exit the method. If the file does not exist, the file will 			 be created and break up the entries list into separate strings before 				 writing them to the file.
			-Method: void LoadEntries(Entry entry) prompts the user to load a file. If there are entries in the entry._entries, then the user will receive a warning that all entries will be deleted upon opening a new file. If the user enters "yes" or "y", then the entries will be deleted and 	epopulated with new ones from each line in the opened file. Any other 			 response will exit the method. If there were no entries to begin with, 			 the entries will be populated with each line from the selected file.
        - Entry.cs
		-creates a new class called Entry
			-Attribute: List<string> _entries creates a new list to store all the entries created by the EntryPrompts() method
			-Attribute: DateOnly _today stores the date to add to each entry
			-Method: void EntryPrompts() outputs a few short questions for the user to answer about their day then concatenates them with the date from 				 _today and appends those strings to the _entries list
    